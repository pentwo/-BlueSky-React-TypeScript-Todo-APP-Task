{"version":3,"sources":["state/actions.ts","state/state.ts","state/context.ts","components/SearchFields/index.tsx","components/EditField/ProjectInputField.tsx","components/EditField/UserSelect.tsx","components/EditField/Switch.tsx","components/EditField/index.tsx","components/TodoList.tsx","components/AddTodo.tsx","Util/Todo.ts","Util/User.ts","state/reducer.ts","App.tsx","serviceWorker.ts","Server/server.ts","index.tsx"],"names":["ActionTypes","initialState","todos","users","tempTodo","id","name","userId","isComplete","search","GlobalContext","createContext","state","dispatch","useGlobalContext","useContext","useStyles","makeStyles","theme","createStyles","Paper","padding","spacing","marginBottom","Grid","marginTop","gap","formControl","minWidth","selectEmpty","TextField","SearchFields","classes","globalContext","className","elevation","container","justifyContent","alignItems","item","label","type","variant","onChange","e","value","target","Search","payload","FormControl","InputLabel","Select","MenuItem","map","user","key","firstName","lastName","htmlFor","Switch","disabled","icon","fontSize","checkedIcon","checked","color","ProjectInputField","inputName","setState","editTodo","useState","setValue","useEffect","pre","EditTodo","UserSelect","select","setSelect","Box","display","flexDirection","Switches","checkState","setCheckState","paper","position","top","left","transform","width","backgroundColor","palette","background","border","boxShadow","shadows","EditField","handleModalClose","setSearch","Button","onClick","ClearTempTodo","startIcon","table","h2","marginLeft","TodoList","modalOpen","setModalOpen","handleEdit","currentTarget","getAttribute","split","handleDelete","window","confirm","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","filter","todo","regex","RegExp","nameMatch","userMatch","isCompleteMatch","userQuery","Object","values","TodoRow","length","Modal","open","onClose","hover","scope","data-delete","data-edit","AddTodo","newTodo","setNewTodo","getTodos","a","axios","get","then","response","data","console","error","getTodo","addTodo","post","result","saveTodo","patch","deleteTodo","delete","getUsers","stateReducer","action","RefreshTodoList","RefreshUserList","asyncActionHandlers","ADD_AND_REFRESH_TODO","status","statusText","GET_EDIT_AND_REFRESH_TODO","SAVE_EDIT_TODO_AND_REFRESH_TODO","DELETE_AND_REFRESH_TODO","REFRESH_TODO","sort","b","REFRESH_USER","App","useReducerAsync","addTaskModalState","setAddTaskModalState","Provider","Container","maxWidth","Boolean","location","hostname","match","Server","serializers","RestSerializer","extend","serializeIds","models","Model","belongsTo","hasMany","factories","Factory","i","Number","faker","words","number","boolean","seeds","server","createList","routes","this","namespace","schema","all","request","userID","params","where","active","todoId","find","destroy","success","attrs","JSON","parse","requestBody","update","create","createThemeCustom","createTheme","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.abe89dde.chunk.js","sourcesContent":["import { Todo, User, TempTodo, SearchTodo, NewTodo } from \"./state\";\n\n// normal reducer actions\nexport enum ActionTypes {\n  RefreshTodoList,\n  RefreshUserList,\n  AddTodo,\n  EditTodo,\n  DeleteAndRefreshTodo,\n  ClearTempTodo,\n  Search,\n  Update,\n  Clear,\n}\n\n// Actions for Normal reducer calls\n\nexport interface RefreshTodoList {\n  type: ActionTypes.RefreshTodoList;\n  payload: Todo[];\n}\nexport interface RefreshUserList {\n  type: ActionTypes.RefreshUserList;\n  payload: User[];\n}\n\nexport interface AddTodo {\n  type: ActionTypes.AddTodo;\n  payload: Todo;\n}\nexport interface EditTodo {\n  type: ActionTypes.EditTodo;\n  payload: TempTodo;\n}\nexport interface Search {\n  type: ActionTypes.Search;\n  payload: SearchTodo;\n}\n\nexport interface ClearTempTodo {\n  type: ActionTypes.ClearTempTodo;\n}\n\n// Actions for Async reducer calls\n\nexport const ADD_AND_REFRESH_TODO = \"ADD_AND_REFRESH_TODO\";\nexport const DELETE_AND_REFRESH_TODO = \"DELETE_AND_REFRESH_TODO\";\nexport const GET_EDIT_AND_REFRESH_TODO = \"GET_EDIT_AND_REFRESH_TODO\";\nexport const SAVE_EDIT_TODO_AND_REFRESH_TODO =\n  \"SAVE_EDIT_TODO_AND_REFRESH_TODO\";\nexport const REFRESH_TODO = \"REFRESH_TODO\";\nexport const REFRESH_USER = \"REFRESH_USER\";\n\nexport interface AddAndRefreshTodo {\n  type: \"ADD_AND_REFRESH_TODO\";\n  payload: NewTodo;\n}\nexport interface EditAndRefreshTodo {\n  type: \"GET_EDIT_AND_REFRESH_TODO\";\n  payload: { id: string };\n}\nexport interface SaveEditAndRefreshTodo {\n  type: \"SAVE_EDIT_TODO_AND_REFRESH_TODO\";\n  payload: TempTodo;\n}\n\nexport interface DeleteAndRefreshTodo {\n  type: \"DELETE_AND_REFRESH_TODO\";\n  payload: { id: string };\n}\n\nexport interface RefreshTodo {\n  type: \"REFRESH_TODO\";\n}\nexport interface RefreshUser {\n  type: \"REFRESH_USER\";\n}\n\nexport type AsyncActions =\n  | AddAndRefreshTodo\n  | EditAndRefreshTodo\n  | SaveEditAndRefreshTodo\n  | DeleteAndRefreshTodo\n  | RefreshTodo\n  | RefreshUser;\n\nexport type StateActions =\n  | RefreshTodoList\n  | RefreshUserList\n  | AddTodo\n  | EditTodo\n  | Search\n  | ClearTempTodo\n  | AddAndRefreshTodo\n  | EditAndRefreshTodo\n  | SaveEditAndRefreshTodo\n  | DeleteAndRefreshTodo\n  | RefreshTodo\n  | RefreshUser;\n\nexport type Actions = StateActions | AsyncActions;\n","// User for the Tasks\nexport interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\n// Tasks to be display/delete\nexport interface Todo {\n  id: string;\n  name: string;\n  user: string;\n  isComplete: boolean;\n}\n\n// Tasks prepared for save into database\nexport interface NewTodo {\n  name: string;\n  user: string;\n  isComplete: boolean;\n}\n\n// Temporary task load from database, ready to be edit and save\nexport interface TempTodo {\n  id: string;\n  name: string;\n  userId: string;\n  isComplete: boolean;\n}\n\n// Put all search query text/userId in here, ready for be used in filter query\nexport interface SearchTodo {\n  name: string;\n  userId: string | number;\n  isComplete: boolean;\n}\n\nexport type GlobalState = {\n  todos: Todo[];\n  users: User[];\n  search: SearchTodo;\n  tempTodo: undefined | TempTodo;\n};\n\nexport const initialState: GlobalState = {\n  todos: [],\n  users: [],\n  tempTodo: {\n    id: \"\",\n    name: \"\",\n    userId: \"\",\n    isComplete: false,\n  },\n  search: {\n    name: \"\",\n    userId: \"\",\n    isComplete: false,\n  },\n};\n","import { Dispatch, createContext, useContext } from \"react\";\nimport { Actions } from \"./actions\";\nimport { GlobalState, initialState } from \"./state\";\n\nexport const GlobalContext = createContext<{\n  state: GlobalState;\n  dispatch: Dispatch<Actions>;\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n});\n\nexport const useGlobalContext = () => useContext(GlobalContext);\n","import React from \"react\";\nimport {\n  createStyles,\n  FormControl,\n  Grid,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Switch,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\nimport RadioButtonUncheckedOutlinedIcon from \"@material-ui/icons/RadioButtonUncheckedOutlined\";\n\nimport { ActionTypes } from \"../../state/actions\";\nimport { useGlobalContext } from \"../../state/context\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    Paper: {\n      padding: theme.spacing(2),\n      marginBottom: theme.spacing(4),\n    },\n    Grid: {\n      marginTop: 24,\n      gap: theme.spacing(2),\n    },\n    formControl: {\n      minWidth: 240,\n      marginBottom: theme.spacing(2),\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    TextField: {\n      minWidth: 360,\n      marginBottom: theme.spacing(2),\n    },\n  })\n);\n\nexport default function SearchFields() {\n  const classes = useStyles();\n\n  // Loading global context\n  const globalContext = useGlobalContext();\n  const { state, dispatch } = globalContext;\n  const { search } = state;\n\n  // Set input value to search state\n  function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = e.target;\n\n    dispatch({ type: ActionTypes.Search, payload: { ...search, name: value } });\n  }\n  // Set select value to search state\n  function handleSelectChange(\n    e: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) {\n    const value = e.target.value as string;\n\n    dispatch({\n      type: ActionTypes.Search,\n      payload: { ...search, userId: value },\n    });\n  }\n  // Set switch boolean value to search state\n  function handleSwitchChange(e: React.ChangeEvent<HTMLInputElement>) {\n    dispatch({\n      type: ActionTypes.Search,\n      payload: { ...search, isComplete: e.target.checked },\n    });\n  }\n\n  if (!globalContext) return null;\n  return (\n    <Paper className={classes.Paper} elevation={4}>\n      <h2>Search</h2>\n      <Grid\n        className={classes.Grid}\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        {/* Task name search input */}\n        <Grid item>\n          <TextField\n            className={classes.TextField}\n            label=\"Project Name\"\n            type=\"text\"\n            name=\"searchInput\"\n            variant=\"outlined\"\n            onChange={handleInputChange}\n            value={search.name}\n          />\n        </Grid>\n\n        {/* User Selector */}\n        <Grid item>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel>User</InputLabel>\n            <Select\n              label=\"User\"\n              name=\"searchSelect\"\n              value={search.userId}\n              onChange={handleSelectChange}\n            >\n              <MenuItem value=\"\">\n                <em>None</em>\n              </MenuItem>\n              {state.users.map((user) => {\n                return (\n                  <MenuItem\n                    key={`User-${user.id}`}\n                    value={user.id}\n                  >{`${user.firstName} ${user.lastName}`}</MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Only enable when Input text or Select user have value*/}\n        <Grid item>\n          <label htmlFor=\"completed\">Completed</label>\n          <Switch\n            disabled={search.name === \"\" && search.userId === \"\"}\n            icon={<RadioButtonUncheckedOutlinedIcon fontSize=\"small\" />}\n            checkedIcon={<CheckCircleOutlineOutlinedIcon fontSize=\"small\" />}\n            checked={search.isComplete}\n            onChange={handleSwitchChange}\n            name=\"completed\"\n            color=\"primary\"\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { ActionTypes } from \"../../state/actions\";\nimport { useGlobalContext } from \"../../state/context\";\nimport { TempTodo } from \"../../state/state\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    TextField: {\n      minWidth: 360,\n      marginBottom: theme.spacing(2),\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\ninterface ProjectInputField {\n  label: string;\n  editTodo?: TempTodo;\n  inputName: string;\n  setState?: Dispatch<\n    SetStateAction<{ name: string; user: string; isComplete: boolean }>\n  >;\n}\n\nexport default function ProjectInputField({\n  label,\n  inputName,\n  editTodo,\n  setState,\n}: ProjectInputField) {\n  const classes = useStyles();\n  const [value, setValue] = useState(\"\");\n\n  const globalContext = useGlobalContext();\n  const { state, dispatch } = globalContext;\n\n  useEffect(() => {\n    if (state.tempTodo) {\n      setValue(state.tempTodo.name);\n    }\n  }, [state.tempTodo]);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = e.target;\n\n    setValue(value);\n\n    if (setState) {\n      setState((pre) => {\n        return { ...pre, name: value };\n      });\n    }\n\n    if (state.tempTodo) {\n      dispatch({\n        type: ActionTypes.EditTodo,\n        payload: { ...state.tempTodo, name: value },\n      });\n    }\n  }\n\n  if (!globalContext) return null;\n  return (\n    <TextField\n      className={classes.TextField}\n      label={label}\n      type=\"text\"\n      name={inputName}\n      variant=\"outlined\"\n      onChange={handleChange}\n      value={value}\n    />\n  );\n}\n","import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport { ActionTypes } from \"../../state/actions\";\nimport { useGlobalContext } from \"../../state/context\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      minWidth: 240,\n      marginBottom: theme.spacing(2),\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\ninterface UserSelect {\n  inputName: string;\n  // editTodo: EditTodo;\n  setState?: Dispatch<\n    SetStateAction<{ name: string; user: string; isComplete: boolean }>\n  >;\n}\n\nexport default function UserSelect({ inputName, setState }: UserSelect) {\n  const classes = useStyles();\n  const [select, setSelect] = useState<string>(\"\");\n  const globalContext = useGlobalContext();\n\n  const { state, dispatch } = globalContext;\n\n  useEffect(() => {\n    if (state.tempTodo) {\n      setSelect(state.tempTodo.userId);\n    }\n  }, [state.tempTodo, select]);\n\n  if (!globalContext) return null;\n\n  function handleChange(\n    e: React.ChangeEvent<{ name?: string; value: unknown }>\n  ) {\n    const value = e.target.value as string;\n\n    setSelect(value);\n\n    if (setState) {\n      setState((pre) => {\n        return { ...pre, user: value };\n      });\n    }\n\n    if (state.tempTodo) {\n      dispatch({\n        type: ActionTypes.EditTodo,\n        payload: { ...state.tempTodo, userId: value },\n      });\n    }\n  }\n\n  return (\n    <FormControl variant=\"outlined\" className={classes.formControl}>\n      <InputLabel>User</InputLabel>\n      <Select\n        label=\"User\"\n        name={inputName}\n        value={select}\n        onChange={handleChange}\n      >\n        {state.users.map((user) => {\n          return (\n            <MenuItem\n              key={`User-${user.id}`}\n              value={user.id}\n            >{`${user.firstName} ${user.lastName}`}</MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n}\n","import React, {\n  useEffect,\n  useState,\n  ChangeEvent,\n  Dispatch,\n  SetStateAction,\n} from \"react\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nimport Switch from \"@material-ui/core/Switch\";\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\nimport RadioButtonUncheckedOutlinedIcon from \"@material-ui/icons/RadioButtonUncheckedOutlined\";\n\nimport { useGlobalContext } from \"../../state/context\";\nimport { ActionTypes } from \"../../state/actions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    Switch: {},\n    Box: {\n      marginBottom: theme.spacing(2),\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n  })\n);\ninterface SwitchProp {\n  checked: boolean;\n  setState?: Dispatch<\n    SetStateAction<{ name: string; user: string; isComplete: boolean }>\n  >;\n}\n\nexport default function Switches({ checked, setState }: SwitchProp) {\n  const classes = useStyles();\n  const [checkState, setCheckState] = useState(false);\n\n  const globalContext = useGlobalContext();\n  const { state, dispatch } = globalContext;\n\n  useEffect(() => {\n    setCheckState(checked);\n  }, [checked]);\n\n  useEffect(() => {\n    if (state.tempTodo) {\n      setCheckState(state.tempTodo.isComplete);\n    }\n  }, [state.tempTodo]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCheckState(!checkState);\n\n    if (setState) {\n      setState((pre) => {\n        return { ...pre, isComplete: !checkState };\n      });\n    }\n\n    if (state.tempTodo) {\n      dispatch({\n        type: ActionTypes.EditTodo,\n        payload: { ...state.tempTodo, isComplete: !checkState },\n      });\n    }\n  };\n\n  if (!globalContext) return null;\n  return (\n    <Box className={classes.Box}>\n      <label htmlFor=\"completed\">Completed</label>\n\n      <Switch\n        className={classes.Switch}\n        icon={<RadioButtonUncheckedOutlinedIcon fontSize=\"small\" />}\n        checkedIcon={<CheckCircleOutlineOutlinedIcon fontSize=\"small\" />}\n        checked={checkState}\n        onChange={handleChange}\n        name=\"checked\"\n        color=\"primary\"\n      />\n    </Box>\n  );\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport {\n  Box,\n  Button,\n  createStyles,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nimport { useGlobalContext } from \"../../state/context\";\nimport {\n  ActionTypes,\n  SAVE_EDIT_TODO_AND_REFRESH_TODO,\n} from \"../../state/actions\";\n\nimport ProjectInputField from \"./ProjectInputField\";\nimport UserSelect from \"./UserSelect\";\nimport Switch from \"./Switch\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #333\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\ninterface EditField {\n  handleModalClose: () => void;\n  setSearch?: Dispatch<\n    SetStateAction<{ name: string; user: string; isComplete: boolean }>\n  >;\n}\n\nexport default function EditField({ handleModalClose, setSearch }: EditField) {\n  const classes = useStyles();\n\n  // Loading global context\n  const globalContext = useGlobalContext();\n  const { state, dispatch } = globalContext;\n  const { tempTodo } = state;\n\n  function handleSaveEdit() {\n    if (tempTodo) {\n      dispatch({\n        type: SAVE_EDIT_TODO_AND_REFRESH_TODO,\n        payload: tempTodo,\n      });\n      dispatch({ type: ActionTypes.ClearTempTodo });\n    }\n    handleModalClose();\n  }\n\n  if (!globalContext) return null;\n  return (\n    <Box className={classes.paper} display=\"flex\" flexDirection=\"column\">\n      <h2>Edit Task</h2>\n      <ProjectInputField\n        editTodo={state.tempTodo}\n        label=\"Project Name\"\n        inputName=\"editInput\"\n      />\n      <UserSelect inputName=\"editSelect\" />\n      <Switch checked={false} setState={setSearch} />\n      <Button\n        variant=\"contained\"\n        onClick={handleSaveEdit}\n        startIcon={<SaveIcon />}\n      >\n        Save Edit\n      </Button>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  Modal,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Theme,\n} from \"@material-ui/core\";\n\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\nimport RadioButtonUncheckedOutlinedIcon from \"@material-ui/icons/RadioButtonUncheckedOutlined\";\n\nimport { Todo, User } from \"../state/state\";\nimport { useGlobalContext } from \"../state/context\";\nimport {\n  GET_EDIT_AND_REFRESH_TODO,\n  DELETE_AND_REFRESH_TODO,\n  ActionTypes,\n} from \"../state/actions\";\nimport EditField from \"./EditField\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    table: {\n      marginBottom: theme.spacing(4),\n    },\n    h2: {\n      marginLeft: theme.spacing(2),\n    },\n  })\n);\n\nexport default function TodoList() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const classes = useStyles();\n\n  // Loading global context\n  const globalContext = useGlobalContext();\n  const { state, dispatch } = globalContext;\n  const { todos, users, search } = state;\n\n  // When modal closed, clear temporary todo\n  const handleModalClose = () => {\n    setModalOpen(false);\n    dispatch({ type: ActionTypes.ClearTempTodo });\n  };\n\n  /**\n   * click on edit button, fetch Todo data for that todo and\n   * put into temporary todo\n   */\n  function handleEdit(e: React.MouseEvent) {\n    const id = e.currentTarget\n      .getAttribute(\"data-edit\")\n      ?.split(\"-\")[1] as string;\n\n    setModalOpen(true);\n    dispatch({ type: GET_EDIT_AND_REFRESH_TODO, payload: { id: id } });\n  }\n\n  // delete todo by id with alert window\n  function handleDelete(e: React.MouseEvent) {\n    if (window.confirm(\"Are you sure you want to delete?\")) {\n      const id = e.currentTarget.getAttribute(\"data-delete\")?.split(\"-\")[1];\n      if (id) {\n        dispatch({ type: DELETE_AND_REFRESH_TODO, payload: { id: id } });\n      }\n    }\n  }\n\n  if (!globalContext) return null;\n  return (\n    <>\n      <TableContainer className={classes.table} component={Paper} elevation={4}>\n        <h2 className={classes.h2}>Task list</h2>\n        {/* Main Table */}\n        <Table aria-label=\"todo table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Project Name</TableCell>\n              <TableCell align=\"center\" width=\"20%\">\n                User\n              </TableCell>\n              <TableCell align=\"center\" width=\"10%\">\n                Completed\n              </TableCell>\n              <TableCell align=\"center\" width=\"5%\">\n                Actions\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {search.name || search.userId ? (\n              todos\n                .filter((todo) => {\n                  const { name, userId, isComplete } = search;\n\n                  const regex = new RegExp(name, \"gi\");\n                  const nameMatch = todo.name.search(regex) !== -1;\n                  let userMatch = true;\n                  if (userId) {\n                    userMatch = todo.user === userId;\n                  }\n                  const isCompleteMatch = isComplete === todo.isComplete;\n\n                  return nameMatch && userMatch && isCompleteMatch;\n                })\n                .map((todo) => {\n                  const userQuery: User = Object.values(users).filter(\n                    (user) => {\n                      return user.id === todo.user;\n                    }\n                  )[0];\n\n                  return (\n                    <TodoRow\n                      key={todo.id}\n                      todo={todo}\n                      userQuery={userQuery}\n                      handleDelete={handleDelete}\n                      handleEdit={handleEdit}\n                    />\n                  );\n                })\n            ) : todos.length > 0 ? (\n              todos.map((todo) => {\n                const userQuery: User = Object.values(users).filter((user) => {\n                  return user.id === todo.user;\n                })[0];\n                return (\n                  <TodoRow\n                    key={todo.id}\n                    todo={todo}\n                    userQuery={userQuery}\n                    handleDelete={handleDelete}\n                    handleEdit={handleEdit}\n                  />\n                );\n              })\n            ) : (\n              <></>\n            )}\n          </TableBody>\n        </Table>\n        {/* Edit Components */}\n        <Modal open={modalOpen} onClose={handleModalClose}>\n          <EditField handleModalClose={handleModalClose} />\n        </Modal>\n      </TableContainer>\n    </>\n  );\n}\n\ninterface TodoRow {\n  todo: Todo;\n  userQuery: User;\n  handleDelete: (e: React.MouseEvent) => void;\n  handleEdit: (e: React.MouseEvent) => void;\n}\n\n// Table row components\nfunction TodoRow({ todo, userQuery, handleDelete, handleEdit }: TodoRow) {\n  return (\n    <TableRow hover>\n      <TableCell scope=\"row\">{todo.name}</TableCell>\n      <TableCell align=\"center\">\n        {`${userQuery?.firstName} ${userQuery?.lastName}`}\n      </TableCell>\n      <TableCell align=\"center\">\n        {todo.isComplete ? (\n          <CheckCircleOutlineOutlinedIcon color=\"primary\" />\n        ) : (\n          <RadioButtonUncheckedOutlinedIcon color=\"primary\" />\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        <CancelIcon\n          data-delete={`Delete-${todo.id}`}\n          color=\"primary\"\n          onClick={handleDelete}\n        />\n        <EditIcon\n          data-edit={`Edit-${todo.id}`}\n          color=\"primary\"\n          onClick={handleEdit}\n        />\n      </TableCell>\n    </TableRow>\n  );\n}\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport React, { useState } from \"react\";\n\nimport { useGlobalContext } from \"../state/context\";\nimport ProjectInputField from \"./EditField/ProjectInputField\";\nimport UserSelect from \"./EditField/UserSelect\";\nimport Switch from \"./EditField/Switch\";\nimport { ActionTypes, ADD_AND_REFRESH_TODO } from \"../state/actions\";\nimport { TempTodo } from \"../state/state\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #333\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\ninterface AddTask {\n  handleModalClose: () => void;\n}\n\nexport default function AddTodo({ handleModalClose }: AddTask) {\n  const classes = useStyles();\n\n  // Loading global context\n  const globalContext = useGlobalContext();\n  const { dispatch } = globalContext;\n\n  const [newTodo, setNewTodo] = useState({\n    name: \"\",\n    user: \"\",\n    isComplete: false,\n  });\n\n  // Dispatch Save actions and clear temporary Todo action\n  function handleSave() {\n    dispatch({ type: ADD_AND_REFRESH_TODO, payload: newTodo });\n    dispatch({ type: ActionTypes.ClearTempTodo });\n    handleModalClose();\n  }\n\n  if (!globalContext) return null;\n  return (\n    <Box className={classes.paper} display=\"flex\" flexDirection=\"column\">\n      <h2>Add Task</h2>\n      <ProjectInputField\n        label=\"Project Name\"\n        setState={setNewTodo}\n        inputName=\"newTodoInput\"\n      />\n      <UserSelect setState={setNewTodo} inputName=\"newTodoSelect\" />\n      <Switch checked={false} setState={setNewTodo} />\n      <Button\n        disabled={newTodo.name === \"\" || newTodo.user === \"\"}\n        variant=\"contained\"\n        onClick={handleSave}\n        startIcon={<SaveIcon />}\n      >\n        Save\n      </Button>\n    </Box>\n  );\n}\n","import axios from \"axios\";\nimport { TempTodo, NewTodo } from \"../state/state\";\n\n/**\n * Get all list of todos\n * @returns Todo[]\n */\nexport async function getTodos() {\n  try {\n    const { todos } = await axios\n      .get(\"api/todos\")\n      .then((response) => response.data);\n\n    return todos;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/**\n * Get Todo from server by ID\n * @param id {Number|String} Todo id\n * @returns todo\n */\nexport async function getTodo(id: string | number) {\n  try {\n    const { todo } = await axios\n      .get(`api/todo/${id}`)\n      .then((response) => response.data);\n\n    return todo;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/**\n * Sent Todo to the server to save\n * @param payload {NewTodo}\n * @returns\n */\nexport async function addTodo(payload: NewTodo) {\n  try {\n    const result = await axios\n      .post(`api/todo/create`, {\n        ...payload,\n      })\n      .then((response) => response);\n\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/**\n * Save Todo to the database\n * @param payload {TempTodo}\n * @returns todo\n */\nexport async function saveTodo(payload: TempTodo) {\n  try {\n    const { id } = payload;\n    const { todo } = await axios\n      .patch(`api/todo/${id}/edit`, {\n        ...payload,\n      })\n      .then((response) => response.data);\n\n    return todo;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/**\n * Delete todo by id\n * @param id\n * @returns result: success | error\n */\nexport async function deleteTodo(id: string | number) {\n  try {\n    const result = await axios\n      .delete(`api/todo/${id}/delete`)\n      .then((response) => response);\n\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import axios from \"axios\";\n\n/**\n * Get all users from the database\n * @returns user[]\n */\nexport async function getUsers() {\n  try {\n    const { users } = await axios\n      .get(\"api/users\")\n      .then((response) => response.data);\n\n    return users;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import { Reducer } from \"react\";\nimport { AsyncActionHandlers } from \"use-reducer-async\";\n\nimport { addTodo, getTodos, deleteTodo, getTodo, saveTodo } from \"../Util/Todo\";\nimport { getUsers } from \"../Util/User\";\nimport {\n  ActionTypes,\n  AsyncActions,\n  REFRESH_TODO,\n  StateActions,\n} from \"./actions\";\nimport { GlobalState } from \"./state\";\n\nexport function stateReducer(\n  state: GlobalState,\n  action: StateActions\n): GlobalState {\n  switch (action.type) {\n    case ActionTypes.RefreshTodoList:\n      return { ...state, todos: [...action.payload] };\n\n    case ActionTypes.RefreshUserList:\n      return { ...state, users: [...action.payload] };\n\n    case ActionTypes.AddTodo:\n      return { ...state, todos: [action.payload, ...state.todos] };\n\n    case ActionTypes.EditTodo:\n      return { ...state, tempTodo: { ...action.payload } };\n\n    case ActionTypes.ClearTempTodo:\n      return {\n        ...state,\n        tempTodo: {\n          id: \"\",\n          name: \"\",\n          userId: \"\",\n          isComplete: false,\n        },\n      };\n\n    case ActionTypes.Search:\n      return { ...state, search: { ...action.payload } };\n\n    default:\n      return { ...state };\n  }\n}\n\nexport const asyncActionHandlers: AsyncActionHandlers<\n  Reducer<GlobalState, StateActions>,\n  AsyncActions\n> = {\n  ADD_AND_REFRESH_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      const result = await addTodo(action.payload);\n      if (result?.status !== 200) {\n        console.error(result?.statusText);\n      }\n\n      dispatch({ type: REFRESH_TODO });\n    },\n\n  GET_EDIT_AND_REFRESH_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      const todo = await getTodo(action.payload.id);\n      dispatch({ type: ActionTypes.EditTodo, payload: todo });\n\n      dispatch({ type: REFRESH_TODO });\n    },\n\n  SAVE_EDIT_TODO_AND_REFRESH_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      // Call async to save Todo to database\n      await saveTodo(action.payload);\n\n      dispatch({ type: REFRESH_TODO });\n    },\n\n  DELETE_AND_REFRESH_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      const id = action.payload.id as string;\n      const result = await deleteTodo(id);\n      if (result?.status !== 200) {\n        console.error(result?.statusText);\n      }\n\n      dispatch({ type: REFRESH_TODO });\n    },\n\n  REFRESH_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      const result = await getTodos();\n      result.sort(function (\n        a: { isComplete: boolean },\n        b: { isComplete: boolean }\n      ) {\n        return a.isComplete === b.isComplete ? 0 : a.isComplete ? -1 : 1;\n      });\n\n      dispatch({ type: ActionTypes.RefreshTodoList, payload: result });\n    },\n\n  REFRESH_USER:\n    ({ dispatch }) =>\n    async (action) => {\n      const result = await getUsers();\n\n      dispatch({ type: ActionTypes.RefreshUserList, payload: result });\n    },\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useReducerAsync } from \"use-reducer-async\";\nimport { Box, Button, Container, Modal } from \"@material-ui/core\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\n\nimport \"./App.css\";\nimport SearchFields from \"./components/SearchFields\";\nimport TodoList from \"./components/TodoList\";\nimport AddTodo from \"./components/AddTodo\";\n\n// New implementation\nimport { initialState } from \"./state/state\";\nimport { stateReducer, asyncActionHandlers } from \"./state/reducer\";\nimport { GlobalContext } from \"./state/context\";\nimport { ActionTypes, REFRESH_TODO, REFRESH_USER } from \"./state/actions\";\n\nfunction App() {\n  // Context provider and reducers\n  const [state, dispatch] = useReducerAsync(\n    stateReducer,\n    initialState,\n    asyncActionHandlers\n  );\n\n  // MODAL controls\n  const [addTaskModalState, setAddTaskModalState] = useState(false);\n\n  const handleModalOpen = () => {\n    setAddTaskModalState(true);\n  };\n\n  const handleModalClose = () => {\n    setAddTaskModalState(false);\n    dispatch({ type: ActionTypes.ClearTempTodo });\n  };\n\n  // Load Tasks and users from Mirage Database\n  useEffect(() => {\n    dispatch({ type: REFRESH_TODO });\n    dispatch({ type: REFRESH_USER });\n  }, [dispatch]);\n\n  return (\n    <GlobalContext.Provider value={{ state, dispatch }}>\n      <div className=\"App\">\n        <Container maxWidth=\"md\">\n          {/* Search fields */}\n          <SearchFields />\n          {/* Task List */}\n          <TodoList />\n          {/* Add Task BUTTON */}\n          <Box display=\"flex\" flexDirection=\"row-reverse\">\n            <Button\n              variant=\"contained\"\n              onClick={handleModalOpen}\n              startIcon={<AddCircleOutlineIcon />}\n            >\n              Add Task\n            </Button>\n          </Box>\n          {/* Add Task MODAL*/}\n          <Modal open={addTaskModalState} onClose={handleModalClose}>\n            <AddTodo handleModalClose={handleModalClose} />\n          </Modal>\n        </Container>\n      </div>\n    </GlobalContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  Server,\n  Model,\n  belongsTo,\n  hasMany,\n  RestSerializer,\n  Factory,\n  JSONAPISerializer,\n  Serializer,\n} from \"miragejs\";\nimport * as faker from \"faker\";\nimport { serialize } from \"v8\";\n\nexport function makeServer() {\n  const server = new Server({\n    serializers: {\n      // application: JSONAPISerializer.extend({\n      //     alwaysIncludeLinkageData: false\n      // }),\n      todo: RestSerializer.extend({\n        serializeIds: \"always\",\n      }),\n      // users: RestSerializer.extend({\n      //     include:[\"todo\"],\n      //     embed: true\n      // })\n    },\n    models: {\n      todo: Model.extend({\n        user: belongsTo(),\n      }),\n      user: Model.extend({\n        todos: hasMany(),\n      }),\n    },\n    factories: {\n      user: Factory.extend({\n        id(i: number) {\n          return Number(i + 1);\n        },\n        firstName() {\n          return faker.name.firstName();\n        },\n        lastName() {\n          return faker.name.lastName();\n        },\n      }),\n      todo: Factory.extend({\n        name() {\n          return faker.random.words(faker.random.number(4) + 1);\n        },\n        isComplete() {\n          return faker.random.boolean();\n        },\n      }),\n    },\n    seeds(server) {\n      const users = server.createList(\"user\", 5);\n      for (const user of users) {\n        server.createList(\"todo\", faker.random.number(4), {\n          user: user,\n        } as any);\n      }\n    },\n    routes() {\n      this.namespace = \"api\";\n      this.get(\"/users\", (schema: any) => {\n        return schema.users.all();\n      });\n      this.get(\"/user/:id/todos\", (schema: any, request) => {\n        const userID = request.params.id;\n        const todos = schema.todos.where({ userID: userID });\n        return {\n          todos: todos,\n        };\n      });\n\n      // todo apis\n\n      this.get(\"/todos\", (schema: any, request) => {\n        const active = request.params.active;\n        return schema.todos.all();\n      });\n      this.get(\"/todo/:id\", (schema: any, request) => {\n        const todoId = request.params.id;\n        const todo = schema.todos.find(todoId);\n        return {\n          todo: todo,\n        };\n      });\n      this.delete(\"/todo/:id/delete\", (schema: any, request) => {\n        const todoId = request.params.id;\n        schema.todos.find(todoId).destroy();\n        return { success: true };\n      });\n\n      this.patch(\"/todo/:id/edit\", (schema: any, request) => {\n        const todoId = request.params.id;\n        let attrs = JSON.parse(request.requestBody);\n        const todo = schema.todos.find(todoId).update(attrs);\n\n        return {\n          todo: todo,\n        };\n      });\n\n      this.post(\"/todo/create\", (schema: any, request) => {\n        let attrs = JSON.parse(request.requestBody);\n        const user = schema.users.find(attrs.user);\n\n        return schema.todos.create({ ...attrs, user });\n      });\n    },\n  });\n  return server;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport {\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme,\n} from \"@material-ui/core\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { makeServer } from \"./Server/server\";\n\nconst server = makeServer();\n\n// For Warning: findDOMNode is deprecated in StrictMode.\nconst createThemeCustom =\n  process.env.NODE_ENV === \"production\"\n    ? createTheme\n    : unstable_createMuiStrictModeTheme;\nconst theme = createThemeCustom({\n  // ...\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}